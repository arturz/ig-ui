{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nvar _jsxFileName = \"C:\\\\Users\\\\Artur\\\\Documents\\\\Programming\\\\ig\\\\relay\\\\www\\\\client\\\\components\\\\Bot\\\\Test.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { Button, CircularProgress, Typography } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport start from '../../api/bots/start';\nimport executeSupervisor from '../../api/bots/executeSupervisor';\nimport getSupervisors from '../../api/bots/getSupervisors';\nimport exit from '../../api/bots/exit';\nimport Streaming from '../Streaming';\n\nconst mapStateToProps = state => ({\n  currentAccount: state.bot.currentAccount\n});\n\nvar States;\n\n(function (States) {\n  States[States[\"Initial\"] = 0] = \"Initial\";\n  States[States[\"Starting\"] = 1] = \"Starting\";\n})(States || (States = {}));\n\nexport default connect(mapStateToProps)(({\n  currentAccount\n}) => {\n  const {\n    0: bot,\n    1: setBot\n  } = useState(States.Initial);\n\n  const startBot = async () => {\n    setBot(States.Starting);\n    const id = await start(currentAccount.accountId);\n    if (id) setBot(id);\n  };\n\n  console.log(bot);\n  const {\n    0: response,\n    1: setResponse\n  } = useState(null);\n\n  const callSupervisor = async (botId, name, arity) => {\n    const response = arity === 0 ? await executeSupervisor(botId, name) : await executeSupervisor(botId, name, prompt('Parameter:'));\n    setResponse(response == null ? null : response);\n  };\n\n  const {\n    0: supervisors,\n    1: setSupervisors\n  } = useState([]);\n  useEffect(() => {\n    if (typeof bot === 'string') {\n      getSupervisors(bot).then(setSupervisors);\n    }\n  }, [bot]);\n  useEffect(() => {\n    setBot(States.Initial);\n    setResponse(null);\n    setSupervisors([]);\n  }, [currentAccount.accountId]);\n\n  const exitBot = () => {\n    if (typeof bot !== 'string') return;\n    exit(bot);\n    setBot(States.Initial);\n    setResponse(null);\n    setSupervisors([]);\n  };\n\n  useEffect(() => {\n    window.addEventListener('unload', exitBot);\n    console.log(`window.addEventListener('unload', exitBot)`);\n    return () => {\n      exitBot();\n      window.removeEventListener('unload', exitBot);\n      console.log(`window.removeEventListener('unload', exitBot)`);\n    };\n  }, [currentAccount.accountId, bot]);\n  const {\n    0: streaming,\n    1: setStreaming\n  } = useState(true);\n\n  const toggleStreaming = () => setStreaming(streaming => !streaming);\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, bot === States.Initial && __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: startBot,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Odpalaj\"), bot === States.Starting && __jsx(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), typeof bot === 'string' && supervisors.length && __jsx(React.Fragment, null, __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Opcje\"), _Object$entries(supervisors.reduce((acc, _ref) => {\n    let {\n      type\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"type\"]);\n\n    if (acc[type]) {\n      acc[type].push(rest);\n      return acc;\n    }\n\n    acc[type] = [rest];\n    return acc;\n  }, {})).map(([type, supervisors]) => __jsx(\"div\", {\n    key: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, type), supervisors.map(({\n    name,\n    title,\n    arity\n  }) => __jsx(Button, {\n    variant: \"contained\",\n    key: name,\n    onClick: () => callSupervisor(bot, name, arity),\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, title)))), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Odpowied\\u017A: \", response === null ? 'brak' : `\"${response}\"`), __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Podgl\\u0105d\"), __jsx(Streaming, {\n    botId: bot,\n    open: streaming,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: toggleStreaming,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Prze\\u0142\\u0105cz\")));\n});","map":{"version":3,"sources":["C:/Users/Artur/Documents/Programming/ig/relay/www/client/components/Bot/Test.tsx"],"names":["useState","useEffect","Button","CircularProgress","Typography","connect","start","executeSupervisor","getSupervisors","exit","Streaming","mapStateToProps","state","currentAccount","bot","States","setBot","Initial","startBot","Starting","id","accountId","console","log","response","setResponse","callSupervisor","botId","name","arity","prompt","supervisors","setSupervisors","then","exitBot","window","addEventListener","removeEventListener","streaming","setStreaming","toggleStreaming","length","reduce","acc","type","rest","push","map","title"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react'\r\nimport { Button, CircularProgress, Typography } from '@material-ui/core'\r\nimport { connect } from 'react-redux'\r\nimport { Account } from '../../types/Account'\r\nimport start from '../../api/bots/start'\r\nimport executeSupervisor from '../../api/bots/executeSupervisor'\r\nimport getSupervisors from '../../api/bots/getSupervisors'\r\nimport exit from '../../api/bots/exit'\r\nimport Streaming from '../Streaming'\r\n\r\nconst mapStateToProps = state => ({\r\n  currentAccount: state.bot.currentAccount\r\n})\r\n\r\nenum States {\r\n  Initial,\r\n  Starting\r\n}\r\n\r\nexport default connect(mapStateToProps)(({ currentAccount }: { currentAccount: Account }) => {\r\n  const [bot, setBot] = useState<States | string>(States.Initial)\r\n  const startBot = async () => {\r\n    setBot(States.Starting)\r\n    const id = await start(currentAccount.accountId)\r\n    if(id)\r\n      setBot(id)\r\n  }\r\n\r\n  console.log(bot)\r\n\r\n  const [response, setResponse] = useState(null)\r\n  const callSupervisor = async (botId: string, name: string, arity: number) => {\r\n    const response = arity === 0\r\n      ? await executeSupervisor(botId, name)\r\n      : await executeSupervisor(botId, name, prompt('Parameter:'))\r\n\r\n    setResponse(response == null ? null : response)\r\n  }\r\n\r\n  const [supervisors, setSupervisors] = useState([])\r\n  useEffect(() => {\r\n    if(typeof bot === 'string'){\r\n      getSupervisors(bot).then(setSupervisors)\r\n    }\r\n  }, [bot])\r\n\r\n  useEffect(() => {\r\n    setBot(States.Initial)\r\n    setResponse(null)\r\n    setSupervisors([])\r\n  }, [currentAccount.accountId])\r\n\r\n  const exitBot = () => {\r\n    if(typeof bot !== 'string')\r\n      return\r\n\r\n    exit(bot)\r\n    setBot(States.Initial)\r\n    setResponse(null)\r\n    setSupervisors([])\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('unload', exitBot)\r\n    console.log(`window.addEventListener('unload', exitBot)`)\r\n    return () => {\r\n      exitBot()\r\n      window.removeEventListener('unload', exitBot)\r\n      console.log(`window.removeEventListener('unload', exitBot)`)\r\n    }\r\n  }, [currentAccount.accountId, bot])\r\n\r\n  const [streaming, setStreaming] = useState(true)\r\n  const toggleStreaming = () =>\r\n    setStreaming(streaming => !streaming)\r\n  \r\n  return (\r\n    <div>\r\n    {bot === States.Initial && <Button variant=\"contained\" color=\"primary\" onClick={startBot}>Odpalaj</Button>}\r\n    {bot === States.Starting && <CircularProgress />}\r\n    {typeof bot === 'string' && supervisors.length && (\r\n      <>\r\n        <Typography variant=\"h4\" gutterBottom>Opcje</Typography>\r\n        {Object.entries(\r\n          supervisors.reduce((acc, { type, ...rest }) => {\r\n            if (acc[type]) {\r\n              acc[type].push(rest)\r\n              return acc\r\n            }\r\n\r\n            acc[type] = [rest]\r\n            return acc\r\n          }, {})\r\n        )\r\n        .map(([type, supervisors]: [string, []]) =>\r\n          <div key={type}>\r\n            <Typography variant=\"subtitle2\">{type}</Typography>\r\n            {supervisors.map(({ name, title, arity }) =>\r\n              <Button variant=\"contained\" key={name} onClick={() => callSupervisor(bot, name, arity)} color=\"primary\">{title}</Button>\r\n            )}\r\n          </div>\r\n        )}\r\n        <br />\r\n        <Typography variant=\"h5\" gutterBottom>Odpowiedź: { response === null ? 'brak' : `\"${response}\"` }</Typography>\r\n        <Typography variant=\"h4\" gutterBottom>Podgląd</Typography>\r\n        <Streaming botId={bot} open={streaming} />\r\n        <Button variant=\"contained\" color=\"primary\" onClick={toggleStreaming}>Przełącz</Button>\r\n      </>\r\n    )}\r\n    </div>\r\n  ) \r\n})"]},"metadata":{},"sourceType":"module"}