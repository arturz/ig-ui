{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"C:\\\\Users\\\\Artur\\\\Documents\\\\Programming\\\\ig\\\\relay\\\\www\\\\client\\\\components\\\\Bot\\\\Logs.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, memo } from 'react';\nimport { Table, TableHead, TableRow, TableCell, TableBody, Typography, makeStyles, CircularProgress, Tooltip } from '@material-ui/core';\nimport getLogs from '../../api/logs/getLogs';\nimport getFollowedCounts from '../../api/logs/getFollowedCounts';\nimport { connect } from 'react-redux';\nimport ms from 'ms';\n\nconst getTimeAgo = date => {\n  const diff = _Date$now() - date.getTime();\n  return `${ms(diff, {\n    long: true\n  })} ago`;\n};\n\nconst useStyles = makeStyles(() => ({\n  row: {\n    '& > *': {\n      paddingLeft: '0',\n      paddingRight: '6px'\n    },\n    '& > *:last-of-type': {\n      paddingRight: '0'\n    }\n  },\n  breakAll: {\n    wordBreak: 'break-all'\n  },\n  noWrap: {\n    whiteSpace: 'nowrap'\n  },\n  createdAt: {\n    userSelect: 'none'\n  }\n}));\n\nconst mapStateToProps = state => ({\n  currentAccount: state.bot.currentAccount\n});\n\nexport default connect(mapStateToProps)(memo(({\n  currentAccount\n}) => {\n  const {\n    0: logs,\n    1: setLogs\n  } = useState(null);\n  useEffect(() => {\n    getLogs(currentAccount.accountId).then(setLogs);\n  }, [currentAccount.accountId]);\n  const {\n    0: followedCounts,\n    1: setFollowedCounts\n  } = useState(null);\n  useEffect(() => {\n    getFollowedCounts(currentAccount.accountId).then(setFollowedCounts);\n  }, [currentAccount.accountId]);\n  const classes = useStyles({});\n  if (logs === null) return __jsx(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  });\n  return __jsx(React.Fragment, null, followedCounts === null ? __jsx(Typography, {\n    variant: \"body1\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Loading stats...\") : followedCounts.map(({\n    count,\n    unfollowed\n  }, index) => __jsx(Typography, {\n    variant: \"body1\",\n    gutterBottom: true,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Total \", unfollowed ? 'unfollowed' : 'followed', \" count: \", count)), __jsx(Table, {\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(TableRow, {\n    className: classes.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"type\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"payload\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"created at\"))), __jsx(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, logs.map(({\n    type,\n    payload,\n    createdAt\n  }, index) => __jsx(TableRow, {\n    key: index,\n    className: classes.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, type), __jsx(TableCell, {\n    className: classes.breakAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, payload), __jsx(TableCell, {\n    className: classes.noWrap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(Tooltip, {\n    title: new Date(createdAt).toLocaleString('en-GB'),\n    placement: \"right\",\n    enterTouchDelay: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: classes.createdAt,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, getTimeAgo(new Date(createdAt))))))))));\n}));","map":{"version":3,"sources":["C:/Users/Artur/Documents/Programming/ig/relay/www/client/components/Bot/Logs.tsx"],"names":["useState","useEffect","memo","Table","TableHead","TableRow","TableCell","TableBody","Typography","makeStyles","CircularProgress","Tooltip","getLogs","getFollowedCounts","connect","ms","getTimeAgo","date","diff","getTime","long","useStyles","row","paddingLeft","paddingRight","breakAll","wordBreak","noWrap","whiteSpace","createdAt","userSelect","mapStateToProps","state","currentAccount","bot","logs","setLogs","accountId","then","followedCounts","setFollowedCounts","classes","map","count","unfollowed","index","type","payload","Date","toLocaleString"],"mappings":"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","sourcesContent":["import { useState, useEffect, memo } from 'react'\r\nimport { Table, TableHead, TableRow, TableCell, TableBody, Typography, makeStyles, CircularProgress, Tooltip } from '@material-ui/core'\r\nimport getLogs from '../../api/logs/getLogs'\r\nimport getFollowedCounts from '../../api/logs/getFollowedCounts'\r\nimport {Account} from '../../types/Account'\r\nimport { connect } from 'react-redux'\r\nimport ms from 'ms'\r\n\r\nconst getTimeAgo = (date: Date) => {\r\n  const diff = Date.now() - date.getTime()\r\n  return `${ms(diff, { long: true })} ago`\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  row: {\r\n    '& > *': {\r\n      paddingLeft: '0',\r\n      paddingRight: '6px'\r\n    },\r\n    '& > *:last-of-type': {\r\n      paddingRight: '0'\r\n    }\r\n  },\r\n  breakAll: {\r\n    wordBreak: 'break-all'\r\n  },\r\n  noWrap: {\r\n    whiteSpace: 'nowrap'\r\n  },\r\n  createdAt: {\r\n    userSelect: 'none'\r\n  }\r\n}))\r\n\r\nconst mapStateToProps = state => ({\r\n  currentAccount: state.bot.currentAccount\r\n})\r\n\r\nexport default connect(mapStateToProps)(memo(({ currentAccount }: { currentAccount: Account }) => {\r\n  const [logs, setLogs] = useState(null)\r\n  useEffect(() => {\r\n    getLogs(currentAccount.accountId).then(setLogs)\r\n  }, [currentAccount.accountId])\r\n\r\n  const [followedCounts, setFollowedCounts] = useState(null)\r\n  useEffect(() => {\r\n    getFollowedCounts(currentAccount.accountId).then(setFollowedCounts)\r\n  }, [currentAccount.accountId])\r\n\r\n  const classes = useStyles({})\r\n\r\n  if(logs === null)\r\n    return <CircularProgress />\r\n\r\n  return (\r\n    <>\r\n      {followedCounts === null\r\n        ? <Typography variant=\"body1\" gutterBottom>Loading stats...</Typography>\r\n        : followedCounts.map(({ count, unfollowed }, index) =>\r\n            <Typography variant=\"body1\" gutterBottom key={index}>\r\n              Total { unfollowed ? 'unfollowed' : 'followed' } count: { count }\r\n            </Typography>\r\n          )}\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow className={classes.row}>\r\n            <TableCell>\r\n              type\r\n            </TableCell>\r\n            <TableCell>\r\n              payload\r\n            </TableCell>\r\n            <TableCell>\r\n              created at\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {logs.map(({ type, payload, createdAt }, index) =>\r\n            <TableRow key={index} className={classes.row}>\r\n              <TableCell>{ type }</TableCell>\r\n              <TableCell className={classes.breakAll}>{ payload }</TableCell>\r\n              <TableCell className={classes.noWrap}>\r\n                <Tooltip title={new Date(createdAt).toLocaleString('en-GB')} placement=\"right\" enterTouchDelay={0}>\r\n                  <span className={classes.createdAt}>\r\n                    { getTimeAgo(new Date(createdAt)) }\r\n                  </span>\r\n                </Tooltip>\r\n              </TableCell>\r\n            </TableRow> \r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </>\r\n  )\r\n}))"]},"metadata":{},"sourceType":"module"}