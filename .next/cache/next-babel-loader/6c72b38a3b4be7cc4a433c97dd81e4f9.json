{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Artur\\\\Documents\\\\Programming\\\\ig\\\\relay\\\\www\\\\client\\\\components\\\\Bot\\\\Index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { TextField, Typography, Button, DialogTitle, DialogContent, DialogActions, CircularProgress } from '@material-ui/core';\nimport getJobs from '../../api/jobs/get';\nimport updateJob from '../../api/jobs/update';\nimport deleteJob from '../../api/jobs/delete';\nimport createJob from '../../api/jobs/create';\nimport { connect } from 'react-redux';\nimport Dialog from '../Dialog';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentAccount: state.bot.currentAccount\n  };\n};\n\nvar CreateJob = connect(mapStateToProps)(function (_ref) {\n  var currentAccount = _ref.currentAccount,\n      open = _ref.open,\n      handleExit = _ref.handleExit;\n\n  var _useState = useState({\n    cron: '',\n    maxDelaySeconds: 0,\n    supervisor: '',\n    supervisorPayload: ''\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var update = function update(key) {\n    return function (_ref2) {\n      var value = _ref2.target.value;\n      return setState(function (state) {\n        return _objectSpread({}, state, _defineProperty({}, key, value));\n      });\n    };\n  };\n\n  var create = function create() {\n    return _regeneratorRuntime.async(function create$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(createJob(currentAccount.accountId, state));\n\n          case 2:\n            location.reload();\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  return __jsx(Dialog, {\n    open: open,\n    onClose: handleExit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, __jsx(DialogTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Create new job\"), __jsx(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(TextField, {\n    label: \"cron\",\n    value: state.cron,\n    onChange: update('cron'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"maximum delay seconds\",\n    type: \"number\",\n    inputProps: {\n      min: \"0\"\n    },\n    value: state.maxDelaySeconds,\n    onChange: update('maxDelaySeconds'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"supervisor\",\n    value: state.supervisor,\n    onChange: update('supervisor'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"payload\",\n    value: state.supervisorPayload,\n    onChange: update('supervisorPayload'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })), __jsx(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(Button, {\n    color: \"primary\",\n    onClick: create,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Create\")));\n});\n\nvar JobForm = function JobForm(_ref3) {\n  var index = _ref3.index,\n      job = _ref3.job;\n\n  var _useState2 = useState(job),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  useEffect(function () {\n    return setState(job);\n  }, [job]);\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    updateJob(state);\n  };\n\n  var update = function update(key) {\n    return function (_ref4) {\n      var value = _ref4.target.value;\n      return setState(function (state) {\n        return _objectSpread({}, state, _defineProperty({}, key, value));\n      });\n    };\n  };\n\n  var del = function del() {\n    return _regeneratorRuntime.async(function del$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(deleteJob(job));\n\n          case 2:\n            location.reload();\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  return __jsx(\"form\", {\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    style: {\n      marginBottom: '16px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"#\", index + 1, __jsx(\"div\", {\n    style: {\n      \"float\": 'right'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"small\",\n    onClick: del,\n    style: {\n      marginRight: '0.5rem'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Delete\"), __jsx(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"small\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Save changes\"))), __jsx(TextField, {\n    label: \"cron\",\n    value: state.cron,\n    onChange: update('cron'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"maximum delay seconds\",\n    type: \"number\",\n    inputProps: {\n      min: \"0\"\n    },\n    value: state.maxDelaySeconds,\n    onChange: update('maxDelaySeconds'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"supervisor\",\n    value: state.supervisor,\n    onChange: update('supervisor'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(TextField, {\n    label: \"payload\",\n    value: state.supervisorPayload,\n    onChange: update('supervisorPayload'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }));\n};\n\nexport default connect(mapStateToProps)(function (_ref5) {\n  var currentAccount = _ref5.currentAccount;\n\n  var _useState3 = useState(null),\n      jobs = _useState3[0],\n      setJobs = _useState3[1];\n\n  useEffect(function () {\n    getJobs(currentAccount.accountId).then(setJobs);\n  }, [currentAccount.accountId]);\n\n  var _useState4 = useState(false),\n      createJobDialog = _useState4[0],\n      setCreateJobDialog = _useState4[1];\n\n  var toggleJobDialog = function toggleJobDialog() {\n    return setCreateJobDialog(function (createJobDialog) {\n      return !createJobDialog;\n    });\n  };\n\n  if (jobs === null) return __jsx(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  });\n  return __jsx(React.Fragment, null, __jsx(CreateJob, {\n    open: createJobDialog,\n    handleExit: toggleJobDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), jobs.map(function (job, index) {\n    return __jsx(JobForm, {\n      index: index,\n      job: job,\n      key: \"\".concat(currentAccount).concat(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    });\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), __jsx(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: toggleJobDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Create job\"));\n});","map":{"version":3,"sources":["C:/Users/Artur/Documents/Programming/ig/relay/www/client/components/Bot/Index.tsx"],"names":["useState","useEffect","TextField","Typography","Button","DialogTitle","DialogContent","DialogActions","CircularProgress","getJobs","updateJob","deleteJob","createJob","connect","Dialog","mapStateToProps","state","currentAccount","bot","CreateJob","open","handleExit","cron","maxDelaySeconds","supervisor","supervisorPayload","setState","update","key","value","target","create","accountId","location","reload","min","JobForm","index","job","handleSubmit","event","preventDefault","del","marginBottom","marginRight","jobs","setJobs","then","createJobDialog","setCreateJobDialog","toggleJobDialog","map"],"mappings":"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","sourcesContent":["import { useState, useCallback, useEffect } from 'react'\r\nimport { TextField, Typography, Button, DialogTitle, DialogContent, DialogContentText, DialogActions, CircularProgress } from '@material-ui/core'\r\nimport getJobs from '../../api/jobs/get'\r\nimport updateJob from '../../api/jobs/update'\r\nimport deleteJob from '../../api/jobs/delete'\r\nimport createJob from '../../api/jobs/create'\r\nimport { connect } from 'react-redux'\r\nimport { Job } from '../../types/Job'\r\nimport { Account } from '../../types/Account'\r\nimport Dialog from '../Dialog'\r\n\r\nconst mapStateToProps = state => ({\r\n  currentAccount: state.bot.currentAccount\r\n})\r\n\r\nconst CreateJob = connect(mapStateToProps)(({ currentAccount, open, handleExit }: { currentAccount: Account, open: boolean, handleExit: (any) => void }) => {\r\n  const [state, setState] = useState({ cron: '', maxDelaySeconds: 0, supervisor: '', supervisorPayload: '' })\r\n\r\n  const update = (key: keyof Job) => ({ target: { value } }) =>\r\n    setState(state => ({\r\n      ...state,\r\n      [key]: value\r\n    }))\r\n\r\n  const create = async () => {\r\n    await createJob(currentAccount.accountId, state)\r\n    location.reload()\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleExit}>\r\n      <DialogTitle>Create new job</DialogTitle>\r\n      <DialogContent>\r\n        <TextField label=\"cron\" value={state.cron} onChange={update('cron')} />\r\n        <TextField label=\"maximum delay seconds\" type=\"number\" inputProps={{ min: \"0\" }} value={state.maxDelaySeconds} onChange={update('maxDelaySeconds')} />\r\n        <br />\r\n        <TextField label=\"supervisor\" value={state.supervisor} onChange={update('supervisor')} />\r\n        <TextField label=\"payload\" value={state.supervisorPayload} onChange={update('supervisorPayload')} />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button color=\"primary\" onClick={create}>\r\n          Create\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n})\r\n\r\nconst JobForm = ({ index, job }: { index: number, job: Job }) => {\r\n  const [state, setState] = useState(job)\r\n\r\n  useEffect(() => setState(job), [job])\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault()\r\n\r\n    updateJob(state)\r\n  }\r\n\r\n  const update = (key: keyof Job) => ({ target: { value } }) =>\r\n    setState(state => ({\r\n      ...state,\r\n      [key]: value\r\n    }))\r\n\r\n  const del = async () => {\r\n    await deleteJob(job)\r\n    location.reload()\r\n  }\r\n\r\n  return (\r\n    <form noValidate autoComplete=\"off\" onSubmit={handleSubmit} style={{ marginBottom: '16px' }}>\r\n      <Typography variant=\"h6\">\r\n        #{ index + 1 }\r\n        <div style={{ float: 'right' }}>\r\n          <Button color=\"secondary\" variant=\"contained\" size=\"small\" onClick={del} style={{ marginRight: '0.5rem' }}>\r\n            Delete\r\n          </Button>\r\n          <Button color=\"secondary\" variant=\"contained\" size=\"small\" type=\"submit\">\r\n            Save changes\r\n          </Button>\r\n        </div>\r\n      </Typography>\r\n      <TextField label=\"cron\" value={state.cron} onChange={update('cron')} />\r\n      <TextField label=\"maximum delay seconds\" type=\"number\" inputProps={{ min: \"0\" }} value={state.maxDelaySeconds} onChange={update('maxDelaySeconds')} />\r\n      <br />\r\n      <TextField label=\"supervisor\" value={state.supervisor} onChange={update('supervisor')} />\r\n      <TextField label=\"payload\" value={state.supervisorPayload} onChange={update('supervisorPayload')} />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default connect(mapStateToProps)(({ currentAccount }: { currentAccount: Account }) => {\r\n  const [jobs, setJobs] = useState(null)\r\n  useEffect(() => {\r\n    getJobs(currentAccount.accountId).then(setJobs)\r\n  }, [currentAccount.accountId])\r\n\r\n  const [createJobDialog, setCreateJobDialog] = useState(false)\r\n  const toggleJobDialog = () => setCreateJobDialog(createJobDialog => !createJobDialog)\r\n\r\n  if(jobs === null)\r\n    return <CircularProgress />\r\n\r\n  return (\r\n    <>\r\n      <CreateJob open={createJobDialog} handleExit={toggleJobDialog} />\r\n      {jobs.map((job, index) => (\r\n        <JobForm \r\n          index={index}\r\n          job={job}\r\n          key={`${currentAccount}${index}`}\r\n        />\r\n      ))}\r\n      <br />\r\n      <Button color=\"primary\" variant=\"contained\" onClick={toggleJobDialog}>Create job</Button>\r\n    </>\r\n  )\r\n})"]},"metadata":{},"sourceType":"module"}