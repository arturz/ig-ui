{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport fetch from '../fetch';\nimport getServerHost from '../../utils/getServerHost';\nexport default (function _callee(data) {\n  var body, _ref, accountId;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(getServerHost(), \"/accounts\"), {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: _JSON$stringify(data)\n          }));\n\n        case 2:\n          body = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(body.json());\n\n        case 5:\n          _ref = _context.sent;\n          accountId = _ref.accountId;\n          return _context.abrupt(\"return\", accountId);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/Artur/Documents/Programming/ig/relay/www/client/api/accounts/createAccount.ts"],"names":["fetch","getServerHost","data","method","headers","body","json","accountId"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AAMA,gBAAe,iBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACMF,KAAK,WAAIC,aAAa,EAAjB,gBAAgC;AACtDE,YAAAA,MAAM,EAAE,MAD8C;AAEtDC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aAF6C;AAGtDC,YAAAA,IAAI,EAAE,gBAAeH,IAAf;AAHgD,WAAhC,CADX;;AAAA;AACPG,UAAAA,IADO;AAAA;AAAA,2CAMcA,IAAI,CAACC,IAAL,EANd;;AAAA;AAAA;AAMNC,UAAAA,SANM,QAMNA,SANM;AAAA,2CAONA,SAPM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import fetch from '../fetch'\r\nimport getServerHost from '../../utils/getServerHost'\r\n\r\nexport interface RequiredAccountData {\r\n  login: string\r\n}\r\n\r\nexport default async (data: RequiredAccountData) => {\r\n  const body = await fetch(`${getServerHost()}/accounts`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data)\r\n  })\r\n  const {accountId} = (await body.json())\r\n  return accountId\r\n}"]},"metadata":{},"sourceType":"module"}